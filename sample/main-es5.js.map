{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/guards/auth.guard.ts","webpack:///src/app/services/auth.service.ts","webpack:///src/app/shared/helpers/cookie.ts","webpack:///src/app/shared/helpers/index.ts","webpack:///src/app/shared/helpers/regex.ts","webpack:///src/app/shared/helpers/url.ts","webpack:///src/app/shared/services/api.service.ts","webpack:///src/app/shared/services/jwt.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","pathMatch","loadChildren","m","AuthModule","data","title","canActivate","HomeModule","redirectTo","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AuthGuard","auth","router","next","state","isAuthenticated","navigate","route","segments","providedIn","AuthService","api","jwt","isLogin","endpoints","login","post","pipe","res","setToken","getAccessToken","get","key","cookies","document","cookie","array","split","filter","str","arr","trim","length","decodeURIComponent","set","name","value","time","encodeURIComponent","expires","toUTCString","remove","phone","query","params","Object","map","join","merge","domain","endpoint","ApiService","http","locale","apiServer","apiServe","result","options","httpOptions","type","headers","put","responseType","link","url","JwtService","token","tokenType","refreshToken","expire","tokenUpdated","refresh_token","Date","access_token_expired","accessToken","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { AuthGuard } from './guards/auth.guard';\nimport { HomeModule } from './modules/home/home.module';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    loadChildren: () => import('./modules/auth/auth.module').then(m => m.AuthModule),\n    data : {\n      title: 'Login'\n    }\n  },\n  {\n    path: 'user',\n    canActivate: [AuthGuard],\n    loadChildren: () => import('./modules/home/home.module').then(m => m.HomeModule),\n    data: {\n      title: 'User'\n    }\n  },\n  {\n    path: '**',\n    redirectTo: '/'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'sample';\n}\n","<router-outlet></router-outlet>","import { HomeModule } from './modules/home/home.module';\nimport { AuthModule } from './modules/auth/auth.module';\nimport { HomeComponent } from './modules/home/home.component';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport {  HttpClientModule } from '@angular/common/http';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { AuthService } from './../services/auth.service';\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router, UrlSegment, CanLoad, Route } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class AuthGuard implements CanActivate, CanLoad {\n  constructor(\n    private auth: AuthService,\n    private router : Router\n  ){}\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    if(!this.auth.isAuthenticated()){\n      this.router.navigate(['/login'])\n      return false;\n    }\n    return true;\n  }\n  canLoad(\n    route: Route,\n    segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n      if(!this.auth.isAuthenticated()){\n        this.router.navigate(['/login'])\n        return false;\n      }\n      return true ;\n    }\n}\n","import { JwtService } from './../shared/services/jwt.service';\nimport { Observable } from 'rxjs';\nimport { ApiService } from './../shared/services/api.service';\nimport { Injectable } from '@angular/core';\nimport { map, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  path: string = \"api\";\n  isLogin : boolean = false;\n  endpoints: any = {\n    login: \"login\"\n  }\n  constructor(\n    private api: ApiService,\n    private jwt: JwtService\n  ) { }\n\n  login(data: any): Observable<any> {\n    return this.api.post(this.path, this.endpoints.login, data).pipe(\n      map((res: any) => {\n        this.jwt.setToken(res);\n        this.isLogin = true;\n        return res;\n      })\n    )\n  }\n  isAuthenticated(){\n    if(this.isLogin){\n      return true;\n    } else {\n      if(this.jwt.getAccessToken()){\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }\n}\n","/**\r\n * Get cookie by key\r\n *\r\n * @export\r\n * @param {*} key\r\n * @returns\r\n */\r\nexport function get(key) {\r\n    let cookies = document.cookie;\r\n    let array = cookies\r\n        .split(';')\r\n        .filter(str => {\r\n            let arr = str.trim().split('=');\r\n            return arr[0] == key;\r\n        });\r\n    if (!array || array.length <= 0) {\r\n        return '';\r\n    }\r\n    return decodeURIComponent(array[0].trim().split('=')[1]);\r\n\r\n}\r\n\r\n/**\r\n * Set cookie with key = value;expires=times\r\n *\r\n * @export\r\n * @param {*} name\r\n * @param {*} value\r\n * @param {Date} [time=null]\r\n * @returns {void}\r\n */\r\nexport function set(name, value, time: Date = null) {\r\n    let cookie = `${name}=${encodeURIComponent(value)}`;\r\n    let expires = (time) ? `; expires=${time.toUTCString()}` : '';\r\n    let path = `; path =/`;\r\n    document.cookie = (`${cookie}${expires}${path}`);\r\n}\r\n\r\n/**\r\n * Remove cookie by key\r\n *\r\n * @export\r\n * @param {*} key\r\n */\r\nexport function remove(key) {\r\n    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`\r\n}","import * as cookie from './cookie';\nimport * as url from './url';\nimport * as regex from './regex';\nexport {\n    url,\n    cookie,\n    regex\n}","export const phone = /[0|+][1-9][0-9]{8,12}/;","/**\n * Object to Query Stirng\n * @export\n * @param params \n * @returns\n */\nexport function query(params: any = {}) {\n    if (params && Object.keys(params).length > 0) {\n        return `${Object.keys(params).filter(key => {\n            return (key && params[key] != 'null')\n        })\n            .map(key => {\n                return [key, encodeURIComponent(params[key])].join('=');\n            }).join('&')}`\n    } else {\n        return ''\n    }\n}\n/**\n * return url: domain/path/endpoint/params\n * @export\n * @param domain \n * @param path \n * @param endpoint \n * @param params \n * @returns\n */\nexport function merge(domain, path, endpoint, params = null) {\n    if ( params && Object.keys(params).length > 0) {\n        return `${domain}/${path}/${endpoint}?${query(params)}`;\n    } else {\n        return `${domain}/${path}/${endpoint}`;\n    }\n}","import { Injectable, Inject, LOCALE_ID } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { JwtService } from './jwt.service';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { url } from '../helpers';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ApiService {\r\n  apiServer: string = environment.apiServe;\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(LOCALE_ID) public locale: any\r\n  ) { }\r\n\r\n  /**\r\n   * REQUEST API\r\n   * METHOD POST\r\n   *\r\n   * @param {string} path\r\n   * @param {string} endpoint\r\n   * @param {*} [data={}]\r\n   * @returns {Observable<any>}\r\n   * @memberof ApiService\r\n   */\r\n  get(path: string, endpoint: string, data: any = {}): Observable<any> {\r\n    return this.http.get(url.merge(this.apiServer, path, endpoint, data)).pipe(\r\n      map((result: any) => {\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * REQUEST API\r\n   * METHOD POST\r\n   *\r\n   * @param {string} path\r\n   * @param {string} endpoint\r\n   * @param {*} [data={}]\r\n   * @param {*} [options={}]\r\n   * @returns\r\n   * @memberof ApiService\r\n   */\r\n  post(path: string, endpoint: string, data: any = {}, options: any = null) {\r\n    let httpOptions;\r\n    if (!options || options.type != 'multipart/form-data') {\r\n      httpOptions = {\r\n        headers: new HttpHeaders({\r\n          'Content-Type': (options && options.type) ? options.type : 'application/json'\r\n        })\r\n      };\r\n    } else {\r\n      httpOptions = {\r\n        headers: new HttpHeaders({})\r\n      };\r\n    }\r\n    return this.http.post(url.merge(this.apiServer, path, endpoint), data, httpOptions).pipe(\r\n      map((result: any) => {\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * REQUEST API\r\n   * METHOD PUT\r\n   * @param {string} path\r\n   * @param {string} endpoint\r\n   * @param {*} data\r\n   * @param {*} [options]\r\n   * @returns {Observable<any>}\r\n   * @memberof ApiService\r\n   */\r\n  put(path: string, endpoint: string, data: any, options?: any): Observable<any> {\r\n    const httpOptions = {\r\n      headers: new HttpHeaders({\r\n        'Content-Type': (options && options.type) ? options.type : 'application/json',\r\n      })\r\n    };\r\n    return this.http.put(url.merge(this.apiServer, path, endpoint), data, httpOptions).pipe(\r\n      map((result: any) => {\r\n        return result;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * REQUEST API FOR FILE DATA\r\n   * METHOD POST\r\n   * @param {string} path\r\n   * @param {string} endpoint\r\n   * @param {*} data\r\n   * @param {*} options\r\n   * @returns {Observable<any>}\r\n   * @memberof ApiService\r\n   */\r\n  file(path: string, endpoint: string, data: any): Observable<any> {\r\n    return this.http.post(url.merge(this.apiServer, path, endpoint), data, { responseType: 'blob' });\r\n  }\r\n\r\n  /**\r\n   * REQUEST API FOR FILE DATA\r\n   * METHOD POST\r\n   * @param {string} link\r\n   * @memberof ApiService\r\n   */\r\n  fileURL(link: string): Observable<any> {\r\n    return this.http.get(link, { responseType: 'blob' });\r\n  }\r\n\r\n  /**\r\n   * Convert json to urlencoded\r\n   * \r\n   * @static\r\n   * @param {*} data\r\n   * @returns\r\n   * @memberof ApiService\r\n   */\r\n  public static convertToFormUrlencoded(data) {\r\n    return Object.keys(data).map(key => {\r\n      return key + '=' + encodeURIComponent(data[key]);\r\n    }).join('&');\r\n  }\r\n\r\n  /**\r\n   * Convert json to query string\r\n   *\r\n   * @static\r\n   * @param {string} url\r\n   * @param {*} data\r\n   * @returns\r\n   * @memberof ApiService\r\n   */\r\n  public static convertToQueryString(url: string, data: any) {\r\n    const query = Object.keys(data).map(key => key + '=' + encodeURIComponent(data[key])).join('&');\r\n    return url + '?' + query;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { cookie } from '../helpers';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\ninterface IAccessToken {\r\n  access_token: string,\r\n  access_token_expired: string,\r\n  refresh_token: string,\r\n  token: string\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtService {\r\n  token = '';\r\n  tokenType = 'Bearer';\r\n  refreshToken = '';\r\n  expire = 7200;\r\n  tokenUpdated: BehaviorSubject<any> = new BehaviorSubject(false);\r\n  constructor() { }\r\n\r\n  /**\r\n   * Get token with format \"Token_type token\"\r\n   *\r\n   * @returns\r\n   * @memberof JwtService\r\n   */\r\n  getToken() {\r\n    if (this.token && this.tokenType) {\r\n      return `${this.tokenType} ${this.token}`;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set token to cookie\r\n   *\r\n   * @param {IAccessToken} res\r\n   * @memberof JwtService\r\n   */\r\n  setToken(res: IAccessToken) {\r\n    this.token = res.token;\r\n    this.refreshToken = res.refresh_token;\r\n    cookie.set('sample', this.token, new Date(res.access_token_expired));\r\n    // cookie.set('qr_code_refresh_token', this.refreshToken);\r\n    this.tokenUpdated.next(true);\r\n  }\r\n\r\n  /**\r\n   * Remove all token\r\n   *\r\n   * @memberof JwtService\r\n   */\r\n  removeToken() {\r\n    this.token = '';\r\n    this.refreshToken = '';\r\n    cookie.remove('sample');\r\n    cookie.remove('qr_code_refresh_token');\r\n  }\r\n  \r\n  /**\r\n   * Get token if token exists, return false if token does not exists\r\n   * \r\n   * @returns {(boolean | string)}\r\n   * @memberof JwtService\r\n   */\r\n  getAccessToken(): boolean | string {\r\n    const accessToken = cookie.get('sample');\r\n    if (!accessToken) {\r\n      return (false);\r\n    }\r\n    this.token = accessToken;\r\n    this.refreshToken = cookie.get('qr_code_refresh_token');\r\n    return accessToken;\r\n  }\r\n\r\n  /**\r\n   * Get refresh token if token exists, return false if refresh token does not exists\r\n   *\r\n   * @returns {(boolean | string)}\r\n   * @memberof JwtService\r\n   */\r\n  getRefreshToken(): boolean | string {\r\n    const refreshToken = cookie.get('qr_code_refresh_token');\r\n    if (!refreshToken) {\r\n      return (false);\r\n    }\r\n    return refreshToken;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiServe: \"https://reqres.in\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}